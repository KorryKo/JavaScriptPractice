/* 1. Для практикума из занятия 7 продумать, где можно применить замыкания.
    Функцию замыкания можно использовать для создания еды и препятствия. Функция может определять объекты игры,
     а функция замыкания может определять тип создаваемого объекта, реализация будет выглядеть так:
        var gameObject = createObject()
        var foodObject = gameObject("food")
        var barrierObject = gameObject("barrier")
        
2. Не выполняя кода, ответить, что выведет браузер и почему: */
if (!("a" in window)) {
    var a = 1;
}
alert(a);
/* undefined.В этом примере переменная "a" объявляется внутри оператора, Javascript сканирует объявление переменной и перемещает ее в начало,
 условие будет ложным, переменная не получит значения и останется неопределенной.
*/

var b = function a(x) {
    x && a(--x);
};
alert(a);
/*  Эта задача неверно сформулирована, так как консоль будет отображать ошибку a  undefined, 
    аналогичную задачу можно найти на http://dmitry.baranovskiy.com/post/91403200.

    В этом примере «a» по-прежнему будет 1, причина в том, что «a» была инициализирована числом один, позже b = function a () {} 
    представляет собой объявление функции в переменной «b», javascript перезапишет объявление функции, но не инициализацию переменной,
    поэтому значение "a" все равно останется равным 1
 */

function a(x) {
    return x * 2;
}
var a;
alert(a);
// объявления функций будут иметь большую иерархию, чем неопределенные переменные, поэтому 'a' будет выводить исходный код функции.


function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3);

/* a будет равна 10. arguments - это объект, который принимает в качестве значений названные аргументы функции, они оба синхронизируются между собой. 
   В примере arguments[2] присваивает значение 10 аргументу а.
 */

function a() {
    alert(this);
}
a.call(null);
/* В alert будет отображаться глобальный объект «window», 
Javascript передаст глобальный объект в значение «this», если метод call получает в качестве аргумента значение null или undefined.
*/